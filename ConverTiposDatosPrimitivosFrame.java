/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package convertipodatosprimitivos;

import javax.swing.JOptionPane;
import javax.swing.JTextField;

/**
 *
 * @author marco
 */
public class ConverTiposDatosPrimitivosFrame extends javax.swing.JFrame {

    /**
     * Creates new form ConverTiposDatosPrimitivosFrame
     */
    public ConverTiposDatosPrimitivosFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jtfFuente = new javax.swing.JTextField();
        jtfDestino = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jcbFuente = new javax.swing.JComboBox<>();
        jcbDestino = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jtfFuente.setForeground(new java.awt.Color(102, 102, 102));

        jLabel1.setText("DatoFuente");

        jLabel2.setText("DatoDestino");

        jcbFuente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Entero", "Flotante", "Cadena", "Doble", "Largo", "Corto", "Boleano", "Caracter", "Byte" }));

        jcbDestino.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Entero", "Flotante", "Cadena", "Doble", "Largo", "Corto", "Boleano", "Caracter", "Byte" }));

        jButton1.setText("Aceptar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addComponent(jcbFuente, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jtfFuente, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(56, 56, 56)
                                .addComponent(jtfDestino, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel2)))
                        .addGap(34, 34, 34)
                        .addComponent(jcbDestino, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(240, 240, 240)
                        .addComponent(jButton1)))
                .addContainerGap(199, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jcbFuente, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jcbDestino, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtfFuente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap(133, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        switch (jcbFuente.getSelectedIndex()) {
            case 0: //conversion de entero a ...
                switch (jcbDestino.getSelectedIndex()) {
                    case 0: //entero
                        try {
                            int aux = Integer.valueOf(jtfFuente.getText());
                            jtfDestino.setText(String.valueOf(aux));
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "ingrese el tipo de dato correcto");
                        }
                        break;
                    case 1: //flotante
                        try {
                            int aux = Integer.valueOf(jtfFuente.getText());
                            float auxD = (float) aux;
                            jtfDestino.setText("" + auxD);
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "ingrese el tipo de dato correcto");
                        }
                        break;
                    case 2: //cadena
                        try {
                            int aux = Integer.valueOf(jtfFuente.getText());
                            jtfDestino.setText(String.valueOf(aux));
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "ingrese el tipo de dato correcto");
                        }
                        break;
                    case 3: //doble
                        try {
                            int aux = Integer.valueOf(jtfFuente.getText());
                            double auxD = (double) aux;
                            jtfDestino.setText("" + auxD);
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "ingrese el tipo de dato correcto");
                        }
                        break;
                    case 4: //largo
                        try {
                            int aux = Integer.valueOf(jtfFuente.getText());
                            long auxD = (long) aux;
                            jtfDestino.setText("" + auxD);
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "ingrese el tipo de dato correcto");
                        }
                        break;
                    case 5: //corto
                        JOptionPane.showMessageDialog(null, "Error de conversion");
                        break;
                    case 6: //booleano
                        JOptionPane.showMessageDialog(null, "Error de conversion");
                        break;
                    case 7: //caracter
                        JOptionPane.showMessageDialog(null, "Error de conversion");
                        break;
                    case 8: //byte
                        JOptionPane.showMessageDialog(null, "Error de conversion");
                        break;
                    default:
                        break;
                }
                break;
            case 1: // conversion de flotante a...
                switch (jcbDestino.getSelectedIndex()) {
                    case 0: //entero
                        try {
                            float aux = Float.valueOf(jtfFuente.getText());
                            int auxD = (int) aux;
                            jtfDestino.setText("" + auxD);
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "ingrese el tipo de dato correcto");
                        }
                        break;
                    case 1: //flotante
                        try {
                            float aux = Float.valueOf(jtfFuente.getText());
                            jtfDestino.setText(String.valueOf(aux));
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "ingrese el tipo de dato correcto");
                        }
                        break;
                    case 2: //cadena
                        try {
                            float aux = Float.valueOf(jtfFuente.getText());
                            jtfDestino.setText(String.valueOf(aux));
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "ingrese el tipo de dato correcto");
                        }
                        break;
                    case 3: //doble
                        try {
                            float aux = Float.valueOf(jtfFuente.getText());
                            double auxD = (double) aux;
                            jtfDestino.setText("" + auxD);
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "ingrese el tipo de dato correcto");
                        }
                        break;
                    case 4: //largo
                        try {
                            float aux = Float.valueOf(jtfFuente.getText());
                            long auxD = (long) aux;
                            jtfDestino.setText("" + auxD);
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "ingrese el tipo de dato correcto");
                        }
                        break;
                    case 5: //corto
                        try {
                            float aux = Float.valueOf(jtfFuente.getText());
                            short auxD = (short) aux;
                            jtfDestino.setText("" + auxD);
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "ingrese el tipo de dato correcto");
                        }
                        break;
                    case 6: //booleano
                        try {
                            float aux = Float.valueOf(jtfFuente.getText());
                            jtfDestino.setText(String.valueOf(aux));
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "ingrese el tipo de dato correcto");
                        }
                        break;
                    case 7: //caracter
                        try {
                            float aux = Float.valueOf(jtfFuente.getText());
                            char auxD = (char) aux;
                            jtfDestino.setText("" + auxD);
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "ingrese el tipo de dato correcto");
                        }
                        break;
                    case 8: //byte
                        try {
                            float aux = Float.valueOf(jtfFuente.getText());
                            byte auxD = (byte) aux;
                            jtfDestino.setText("" + auxD);
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "ingrese el tipo de dato correcto");
                        }
                        break;
                    default:
                        break;
                }
                break;
            case 2://conversion de Cadena a...
                switch (jcbDestino.getSelectedIndex()) {
                    case 0: //entero
                        try {
                            int aux = Integer.valueOf(jtfFuente.getText());
                            jtfDestino.setText(String.valueOf(aux));
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "ingrese el tipo de dato correcto");
                        }
                        break;
                    case 1: //flotante
                        try {
                            float aux = Integer.valueOf(jtfFuente.getText());
                            jtfDestino.setText(String.valueOf(aux));
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "ingrese el tipo de dato correcto");
                        }
                        break;
                    case 2: //cadena
                        try {
                            int aux = Integer.valueOf(jtfFuente.getText());
                            jtfDestino.setText(String.valueOf(aux));
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "ingrese el tipo de dato correcto");
                        }
                        break;
                    case 3: //doble
                        try {
                            double aux = Integer.valueOf(jtfFuente.getText());
                            jtfDestino.setText(String.valueOf(aux));
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "ingrese el tipo de dato correcto");
                        }
                        break;
                    case 4: //largo
                        try {
                            long aux = Integer.valueOf(jtfFuente.getText());
                            jtfDestino.setText(String.valueOf(aux));
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "ingrese el tipo de dato correcto");
                        }
                        break;
                    case 5: //corto
                        JOptionPane.showMessageDialog(null, "Error de conversion");
                        break;
                    case 6: //booleano
                        JOptionPane.showMessageDialog(null, "Error de conversion");
                        break;
                    case 7: //caracter
                        JOptionPane.showMessageDialog(null, "Error de conversion");
                        break;
                    case 8: //byte
                        JOptionPane.showMessageDialog(null, "Error de conversion");
                        break;
                    default:
                        break;
                }
                break;
            case 3: //conversion de doble a...
                switch (jcbDestino.getSelectedIndex()) {
                    case 0: //entero
                        try {
                            double aux = Double.valueOf(jtfFuente.getText());
                            int auxD = (int) aux;
                            jtfDestino.setText("" + auxD);
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "ingrese el tipo de dato correcto");
                        }
                        break;
                    case 1: //flotante
                        try {
                            double aux = Double.valueOf(jtfFuente.getText());
                            float auxD = (float) aux;
                            jtfDestino.setText("" + auxD);
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "ingrese el tipo de dato correcto");
                        }
                        break;
                    case 2: //cadena
                        try {
                            double aux = Double.valueOf(jtfFuente.getText());
                            jtfDestino.setText(String.valueOf(aux));
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "ingrese el tipo de dato correcto");
                        }
                        break;
                    case 3: //doble
                        try {
                            double aux = Double.valueOf(jtfFuente.getText());
                            jtfDestino.setText(String.valueOf(aux));
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "ingrese el tipo de dato correcto");
                        }
                        break;
                    case 4: //largo
                        try {
                            double aux = Double.valueOf(jtfFuente.getText());
                            long auxD = (long) aux;
                            jtfDestino.setText("" + auxD);
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "ingrese el tipo de dato correcto");
                        }
                        break;
                    case 5: //corto
                        try {
                            double aux = Double.valueOf(jtfFuente.getText());
                            short auxD = (short) aux;
                            jtfDestino.setText("" + auxD);
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "ingrese el tipo de dato correcto");
                        }
                        break;
                    case 6: //booleano
                        JOptionPane.showMessageDialog(null, "Error de conversion");
                        break;
                    case 7: //caracter
                        try {
                            double aux = Double.valueOf(jtfFuente.getText());
                            char auxD = (char) aux;
                            jtfDestino.setText("" + auxD);
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "ingrese el tipo de dato correcto");
                        }
                        break;
                    case 8: //byte
                        try {
                            double aux = Double.valueOf(jtfFuente.getText());
                            byte auxD = (byte) aux;
                            jtfDestino.setText("" + auxD);
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "ingrese el tipo de dato correcto");
                        }
                        break;
                    default:
                        break;
                }
                break;
            case 4://conversion de largo a...
                switch (jcbDestino.getSelectedIndex()) {
                    case 0: //entero
                        try {
                            long aux = Long.valueOf(jtfFuente.getText());
                            int auxD = (int) aux;
                            jtfDestino.setText("" + auxD);
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "ingrese el tipo de dato correcto");
                        }
                        break;
                    case 1: //flotante
                        try {
                            long aux = Long.valueOf(jtfFuente.getText());
                            float auxD = (float) aux;
                            jtfDestino.setText("" + auxD);
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "ingrese el tipo de dato correcto");
                        }
                        break;
                    case 2: //cadena
                        try {
                            long aux = Long.valueOf(jtfFuente.getText());
                            jtfDestino.setText(String.valueOf(aux));
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "ingrese el tipo de dato correcto");
                        }
                        break;
                    case 3: //doble
                        try {
                            long aux = Long.valueOf(jtfFuente.getText());
                            double auxD = (double) aux;
                            jtfDestino.setText("" + auxD);
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "ingrese el tipo de dato correcto");
                        }
                        break;
                    case 4: //largo 
                        try {
                            long aux = Long.valueOf(jtfFuente.getText());
                            jtfDestino.setText(String.valueOf(aux));
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "ingrese el tipo de dato correcto");
                        }
                        break;
                    case 5: //corto
                        try {
                            long aux = Long.valueOf(jtfFuente.getText());
                            short auxD = (short) aux;
                            jtfDestino.setText("" + auxD);
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "ingrese el tipo de dato correcto");
                        }
                        break;
                    case 6: //boolenao
                        JOptionPane.showMessageDialog(null, "Error de conversion");
                        break;
                    case 7: //caracter
                        try {
                            long aux = Long.valueOf(jtfFuente.getText());
                            char auxD = (char) aux;
                            jtfDestino.setText("" + auxD);
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "ingrese el tipo de dato correcto");
                        }
                        break;
                    case 8: //byet
                        try {
                            long aux = Long.valueOf(jtfFuente.getText());
                            byte auxD = (byte) aux;
                            jtfDestino.setText("" + auxD);
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "ingrese el tipo de dato correcto");
                        }
                        break;
                    default:
                        break;
                }
                break;
            case 5://conversion de Corto a...
                switch (jcbDestino.getSelectedIndex()) {
                    case 0: // entero
                        try {
                            short aux = Short.valueOf(jtfFuente.getText());
                            int auxD = (int) aux;
                            jtfDestino.setText("" + auxD);
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "ingrese el tipo de dato correcto");
                        }
                        break;
                    case 1: //flotante
                        try {
                            short aux = Short.valueOf(jtfFuente.getText());
                            float auxD = (float) aux;
                            jtfDestino.setText("" + auxD);
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "ingrese el tipo de dato correcto");
                        }
                        break;
                    case 2: //cadena
                        try {
                            short aux = Short.valueOf(jtfFuente.getText());
                            jtfDestino.setText(String.valueOf(aux));
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "ingrese el tipo de dato correcto");
                        }
                        break;
                    case 3: //doble
                        try {
                            short aux = Short.valueOf(jtfFuente.getText());
                            double auxD = (double) aux;
                            jtfDestino.setText("" + auxD);
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "ingrese el tipo de dato correcto");
                        }
                        break;
                    case 4: //largo
                        try {
                            short aux = Short.valueOf(jtfFuente.getText());
                            long auxD = (long) aux;
                            jtfDestino.setText("" + auxD);
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "ingrese el tipo de dato correcto");
                        }
                        break;
                    case 5: //corto
                        try {
                            short aux = Short.valueOf(jtfFuente.getText());
                            short auxD = (short) aux;
                            jtfDestino.setText("" + auxD);
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "ingrese el tipo de dato correcto");
                        }
                        break;
                    case 6: //booleano
                        JOptionPane.showMessageDialog(null, "Error de conversion");
                        break;
                    case 7: //caracter
                        try {
                            short aux = Short.valueOf(jtfFuente.getText());
                            char auxD = (char) aux;
                            jtfDestino.setText("" + auxD);
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "ingrese el tipo de dato correcto");
                        }
                        break;
                    case 8: //byte
                        try {
                            short aux = Short.valueOf(jtfFuente.getText());
                            byte auxD = (byte) aux;
                            jtfDestino.setText("" + auxD);
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "ingrese el tipo de dato correcto");
                        }
                        break;
                    default:
                        break;
                }
                break;
            case 6: //convertir de booleano a...
                switch (jcbDestino.getSelectedIndex()) {
                    case 0: //entero
                        JOptionPane.showMessageDialog(null, "Error de conversion");
                        break;
                    case 1: //flotante
                        JOptionPane.showMessageDialog(null, "Error de conversion");
                        break;
                    case 2: //cadena
                        try {
                            boolean aux = Boolean.valueOf(jtfFuente.getText());
                            jtfDestino.setText(String.valueOf(aux));
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "ingrese el tipo de dato correcto");
                        }
                        break;
                    case 3: //doble
                        JOptionPane.showMessageDialog(null, "Error de conversion");
                        break;
                    case 4: //largo
                        JOptionPane.showMessageDialog(null, "Error de conversion");
                        break;
                    case 5: //corto
                        JOptionPane.showMessageDialog(null, "Error de conversion");
                        break;
                    case 6: //booleano
                        try {
                            boolean aux = Boolean.valueOf(jtfFuente.getText());
                            boolean auxD = (boolean) aux;
                            jtfDestino.setText("" + auxD);
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "ingrese el tipo de dato correcto");
                        }
                        break;
                    case 7: //caracter
                        JOptionPane.showMessageDialog(null, "Error de conversion");
                        break;
                    case 8: //byte
                        JOptionPane.showMessageDialog(null, "Error de conversion");
                        break;
                    default:
                        break;
                }
                break;
            case 7: //convertir de caracter a...
                switch (jcbDestino.getSelectedIndex()) {
                    case 0: //entero
                        JOptionPane.showMessageDialog(null, "Error de conversion");
                        break;
                    case 1: //flotante
                        JOptionPane.showMessageDialog(null, "Error de conversion");
                        break;
                    case 2: //cadena
                        JOptionPane.showMessageDialog(null, "Error de conversion");
                        break;
                    case 3: //doble
                        JOptionPane.showMessageDialog(null, "Error de conversion");
                        break;
                    case 4: //largo
                        JOptionPane.showMessageDialog(null, "Error de conversion");
                        break;
                    case 5: //corto
                        JOptionPane.showMessageDialog(null, "Error de conversion");
                        break;
                    case 6: //booleano
                        JOptionPane.showMessageDialog(null, "Error de conversion");
                        break;
                    case 7: //caracte
                        JOptionPane.showMessageDialog(null, "Error de conversion");
                        break;
                    case 8: //byte
                        JOptionPane.showMessageDialog(null, "Error de conversion");
                        break;
                    default:
                        break;
                }
                break;
            case 8: //convertir de byte a...
                switch (jcbDestino.getSelectedIndex()) {
                    case 0: // entero
                        try {
                            byte aux = Byte.valueOf(jtfFuente.getText());
                            int auxD = (int) aux;
                            jtfDestino.setText("" + auxD);
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "ingrese el tipo de dato correcto");
                        }
                        break;
                    case 1: //flotante
                        try {
                            byte aux = Byte.valueOf(jtfFuente.getText());
                            float auxD = (float) aux;
                            jtfDestino.setText("" + auxD);
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "ingrese el tipo de dato correcto");
                        }
                        break;
                    case 2: //cadena
                        try {
                            byte aux = Byte.valueOf(jtfFuente.getText());
                            char auxD = (char) aux;
                            jtfDestino.setText("" + auxD);
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "ingrese el tipo de dato correcto");
                        }
                        break;
                    case 3: //doble
                        try {
                            byte aux = Byte.valueOf(jtfFuente.getText());
                            double auxD = (double) aux;
                            jtfDestino.setText("" + auxD);
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "ingrese el tipo de dato correcto");
                        }
                        break;
                    case 4: //largo
                        try {
                            byte aux = Byte.valueOf(jtfFuente.getText());
                            long auxD = (long) aux;
                            jtfDestino.setText("" + auxD);
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "ingrese el tipo de dato correcto");
                        }
                        break;
                    case 5: //corto
                        try {
                            byte aux = Byte.valueOf(jtfFuente.getText());
                            short auxD = (short) aux;
                            jtfDestino.setText("" + auxD);
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "ingrese el tipo de dato correcto");
                        }
                        break;
                    case 6: //booleano
                        JOptionPane.showMessageDialog(null, "Error de conversion");
                        break;
                    case 7: //caracter
                        try {
                            byte aux = Byte.valueOf(jtfFuente.getText());
                            char auxD = (char) aux;
                            jtfDestino.setText("" + auxD);
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "ingrese el tipo de dato correcto");
                        }
                        break;
                    case 8: //byte
                        try {
                            byte aux = Byte.valueOf(jtfFuente.getText());
                            byte auxD = (byte) aux;
                            jtfDestino.setText("" + auxD);
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "ingrese el tipo de dato correcto");
                        }
                        break;
                    default:
                        break;
                }
                break;
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConverTiposDatosPrimitivosFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConverTiposDatosPrimitivosFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConverTiposDatosPrimitivosFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConverTiposDatosPrimitivosFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ConverTiposDatosPrimitivosFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JComboBox<String> jcbDestino;
    private javax.swing.JComboBox<String> jcbFuente;
    private javax.swing.JTextField jtfDestino;
    private javax.swing.JTextField jtfFuente;
    // End of variables declaration//GEN-END:variables
}
